[
  {
    "title": "ElevatedButton",
    "description": "A material design button that elevates when pressed.",
    "explanation": "ElevatedButton is a button that adds depth using a shadow effect. It is commonly used for primary actions in a Flutter app. You can customize its style using the `style` parameter, and it is defined inside the `onPressed` callback."
  },
  {
    "title": "TextButton",
    "description": "A button without elevation, typically used for secondary actions.",
    "explanation": "TextButton is a simple, flat button without elevation. It is often used for less important actions like 'Cancel' or 'Read More'. You can customize its appearance with the `style` property."
  },
  {
    "title": "OutlinedButton",
    "description": "A button with a border outline but no elevation.",
    "explanation": "OutlinedButton is useful for medium-emphasis actions. It has a border around the text but no background color. You can modify the border using `side` inside the `style` property."
  },
  {
    "title": "IconButton",
    "description": "A button that displays an icon instead of text.",
    "explanation": "IconButton is typically used for actions like navigation, search, or settings. It requires an `icon` parameter and an `onPressed` callback. You can also customize its color and size."
  },
  {
    "title": "FloatingActionButton (FAB)",
    "description": "A circular button that floats above the UI.",
    "explanation": "FloatingActionButton (FAB) is used for the most important action in an app, such as adding a new item. It is placed using the `floatingActionButton` property in `Scaffold`. You can add icons or even animations inside it."
  },
  {
    "title": "DropdownButton",
    "description": "A button that shows a list of options when tapped.",
    "explanation": "DropdownButton allows users to select from multiple choices. It requires a `value`, a list of `items`, and an `onChanged` function. It is useful for selecting categories, filters, or settings."
  },
  {
    "title": "PopupMenuButton",
    "description": "A button that shows a popup menu when tapped.",
    "explanation": "PopupMenuButton is used to display a list of actions in a popup menu. It is often placed in the app bar or next to items in a list. You define menu items using `PopupMenuItem`."
  },
  {
    "title": "BackButton",
    "description": "A button that navigates back to the previous screen.",
    "explanation": "BackButton is commonly used in the app bar to navigate back to the previous screen. It calls `Navigator.pop(context)` when pressed. It is automatically included in `AppBar` if a route has a parent."
  },
  {
    "title": "CloseButton",
    "description": "A button that closes dialogs or screens.",
    "explanation": "CloseButton is similar to BackButton but is specifically used to dismiss modals or dialogs. It also calls `Navigator.pop(context)`, but it is typically placed in a dialog's top-right corner."
  },
  {
    "title": "GestureDetector",
    "description": "A widget that detects taps and gestures without a visible button.",
    "explanation": "GestureDetector allows you to wrap any widget and make it respond to gestures like tap, double-tap, swipe, and long press. It provides full control over user interactions without using predefined buttons."
  },
  {
    "title": "Form",
    "description": "A container for grouping form fields and handling validation.",
    "explanation": "The Form widget helps manage multiple input fields, validation, and submission. It requires a `GlobalKey<FormState>` to track the form state. Example:\n\n```dart\nfinal _formKey = GlobalKey<FormState>();\nForm(\n  key: _formKey,\n  child: Column(\n    children: [\n      TextFormField(),\n      ElevatedButton(\n        onPressed: () {\n          if (_formKey.currentState!.validate()) {\n            print('Form is valid');\n          }\n        },\n        child: Text('Submit'),\n      )\n    ],\n  ),\n)\n```"
  },
  {
    "title": "TextFormField",
    "description": "A text input field with built-in validation support.",
    "explanation": "TextFormField is a commonly used input field in forms. It supports validators and controllers. Example:\n\n```dart\nTextFormField(\n  decoration: InputDecoration(labelText: 'Enter your name'),\n  validator: (value) {\n    if (value == null || value.isEmpty) {\n      return 'Please enter your name';\n    }\n    return null;\n  },\n)\n```"
  },
  {
    "title": "TextField",
    "description": "A basic text input field without form validation.",
    "explanation": "TextField allows users to enter text but doesn't provide built-in validation like TextFormField. It can be used with a controller to manage input. Example:\n\n```dart\nTextEditingController _controller = TextEditingController();\nTextField(\n  controller: _controller,\n  decoration: InputDecoration(labelText: 'Enter text'),\n)\n```"
  },
  {
    "title": "DropdownButtonFormField",
    "description": "A dropdown button with built-in form validation.",
    "explanation": "DropdownButtonFormField allows users to select an option from a dropdown list and supports validation. Example:\n\n```dart\nDropdownButtonFormField(\n  decoration: InputDecoration(labelText: 'Select a country'),\n  items: [\n    DropdownMenuItem(child: Text('USA'), value: 'USA'),\n    DropdownMenuItem(child: Text('Canada'), value: 'Canada'),\n  ],\n  onChanged: (value) {},\n  validator: (value) => value == null ? 'Please select a country' : null,\n)\n```"
  },
  {
    "title": "CheckboxListTile",
    "description": "A checkbox with a label and built-in state management.",
    "explanation": "CheckboxListTile provides a labeled checkbox with an onChanged function to manage its state. Example:\n\n```dart\nbool _isChecked = false;\nCheckboxListTile(\n  title: Text('Accept Terms & Conditions'),\n  value: _isChecked,\n  onChanged: (bool? value) {\n    setState(() {\n      _isChecked = value!;\n    });\n  },\n)\n```"
  },
  {
    "title": "RadioListTile",
    "description": "A radio button list item for selecting a single option.",
    "explanation": "RadioListTile is useful for multiple-choice selections where only one option can be selected. Example:\n\n```dart\nint _selectedValue = 1;\nRadioListTile(\n  title: Text('Option 1'),\n  value: 1,\n  groupValue: _selectedValue,\n  onChanged: (int? value) {\n    setState(() {\n      _selectedValue = value!;\n    });\n  },\n)\n```"
  },
  {
    "title": "SwitchListTile",
    "description": "A toggle switch with a label for enabling or disabling settings.",
    "explanation": "SwitchListTile allows users to turn options on or off with a toggle switch. Example:\n\n```dart\nbool _isSwitched = false;\nSwitchListTile(\n  title: Text('Enable Notifications'),\n  value: _isSwitched,\n  onChanged: (bool value) {\n    setState(() {\n      _isSwitched = value;\n    });\n  },\n)\n```"
  },
  {
    "title": "DatePicker",
    "description": "A date selection dialog that allows users to pick a date.",
    "explanation": "DatePicker is used to let users select a date from a pop-up calendar. Example:\n\n```dart\nFuture<void> _selectDate(BuildContext context) async {\n  DateTime? picked = await showDatePicker(\n    context: context,\n    initialDate: DateTime.now(),\n    firstDate: DateTime(2000),\n    lastDate: DateTime(2101),\n  );\n}\n```"
  },
  {
    "title": "TimePicker",
    "description": "A time selection dialog that allows users to pick a time.",
    "explanation": "TimePicker lets users choose a time from a pop-up clock. Example:\n\n```dart\nFuture<void> _selectTime(BuildContext context) async {\n  TimeOfDay? picked = await showTimePicker(\n    context: context,\n    initialTime: TimeOfDay.now(),\n  );\n}\n```"
  },
  {
    "title": "Slider",
    "description": "A widget that allows users to select a value by sliding a handle.",
    "explanation": "Slider provides a way to select values within a range using a sliding knob. Example:\n\n```dart\ndouble _value = 50;\nSlider(\n  value: _value,\n  min: 0,\n  max: 100,\n  divisions: 10,\n  label: _value.round().toString(),\n  onChanged: (double newValue) {\n    setState(() {\n      _value = newValue;\n    });\n  },\n)\n```"
  },
{
    "title": "Image.asset",
    "description": "Displays an image from the local assets folder.",
    "explanation": "Image.asset is used to display images stored in the `assets` directory of your project. You need to declare the image paths in `pubspec.yaml`. Example: `Image.asset('assets/image.png')`."
  },
  {
    "title": "Image.network",
    "description": "Loads and displays an image from the internet.",
    "explanation": "Image.network fetches an image from a URL and displays it in the app. It supports caching and placeholders while loading. Example: `Image.network('https://example.com/image.jpg')`."
  },
  {
    "title": "Image.file",
    "description": "Displays an image from the local file system.",
    "explanation": "Image.file is used to show images stored on the device, often retrieved using file pickers or camera APIs. Example: `Image.file(File('/path/to/image.jpg'))`."
  },
  {
    "title": "Image.memory",
    "description": "Displays an image from raw bytes in memory.",
    "explanation": "Image.memory allows displaying images stored as byte arrays, often used with image processing. Example: `Image.memory(Uint8List.fromList(bytes))`."
  },
  {
    "title": "FadeInImage",
    "description": "Displays a placeholder image while loading another image.",
    "explanation": "FadeInImage is useful when loading network images, providing a smooth transition effect from a placeholder to the actual image. Example: `FadeInImage.assetNetwork(placeholder: 'assets/placeholder.png', image: 'https://example.com/image.jpg')`."
  },
  {
    "title": "CircleAvatar",
    "description": "Displays an image inside a circular avatar.",
    "explanation": "CircleAvatar is commonly used for profile pictures. It can display an image or initials. Example: `CircleAvatar(backgroundImage: AssetImage('assets/profile.jpg'))`."
  },
  {
    "title": "ClipRRect",
    "description": "Displays an image with rounded corners.",
    "explanation": "ClipRRect allows clipping an image into a rounded shape by specifying a border radius. Example: `ClipRRect(borderRadius: BorderRadius.circular(10), child: Image.asset('assets/image.png'))`."
  },
  {
    "title": "ImageFiltered",
    "description": "Applies image filters like blur to an image.",
    "explanation": "ImageFiltered lets you apply effects like blur or grayscale to images. Example: `ImageFiltered(imageFilter: ImageFilter.blur(sigmaX: 5, sigmaY: 5), child: Image.asset('assets/image.png'))`."
  },
  {
    "title": "DecoratedBox",
    "description": "Displays an image as a background decoration.",
    "explanation": "DecoratedBox allows setting an image as a container background using `BoxDecoration`. Example: `DecoratedBox(decoration: BoxDecoration(image: DecorationImage(image: AssetImage('assets/bg.jpg'))))`."
  },
  {
    "title": "Hero",
    "description": "Creates a smooth transition animation between images.",
    "explanation": "Hero is used for image transitions between screens. Example: `Hero(tag: 'profilePic', child: Image.asset('assets/profile.jpg'))`."
  }
]
